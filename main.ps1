#requires -version 5.1
$ErrorActionPreference = "Stop"

Import-Module -Name (Join-Path $PSScriptRoot modules | Join-Path -ChildPath CustomUserIO) -Function Exit-OnKeyPress
Import-Module -Name (Join-Path $PSScriptRoot modules | Join-Path -ChildPath ManageShellPrivileges) -Function Start-AsAdministrator, Test-IsAdministrator

$FIREWALLRULEDISPLAYNAME = "Steam Share"
$STEAM64HKEY = "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Valve\Steam"
$STEAM32HKEY = "HKEY_LOCAL_MACHINE\SOFTWARE\Valve\Steam"
$STEAMEXE_DISPLAYNAME = "steam.exe"
$NETSECURITY_ENABLED_TRUE = "True"
$NETSECURITY_ENABLED_FALSE = "False"
$InformationPreference = 'continue'

function Get-SWdfRule {
    Try {
        Get-NetFirewallRule -DisplayName ( "{0}" -f $FIREWALLRULEDISPLAYNAME ) -ErrorAction Stop
    } catch [Microsoft.PowerShell.Cmdletization.Cim.CimJobException] {
        $false
    } finally {
        $Error.Clear()
    }
}

function Test-Is64Bit {
    ( Get-CimInstance win32_operatingsystem | Select-Object -ExpandProperty osarchitecture ) -like "64*"
}

function Get-SteamPath {
    $params = @{
        Path = "Registry::{0}" -f $STEAM64HKEY
        Name = "InstallPath"
    }
    Get-ItemProperty @params | Select-Object -ExpandProperty InstallPath
}

function New-SWdfRule {
    $params = @{
        caption = ""
        message = "Warning: No outbound Windows Defender Firewall rule exists for Steam.exe.`n`n" + "Would you like to create one?"
        choices = @("No", "Yes")
        defaultChoice = 0
    }
    $isConfirmed = $Host.UI.PromptForChoice( $params.caption, $params.message, $params.choices, $params.defaultChoice )
    if (-not$isConfirmed) {
        Exit-OnKeyPress "FATAL ERROR: Cannot proceed without Windows Defender Firewall rule."
    } else {
        $steamKeyPath = If (( Test-Is64Bit )) {
            $STEAM64HKEY
        } Else {
            $STEAM32HKEY
        }
        $steamPath = Get-SteamPath $steamKeyPath
        $params = @{
            DisplayName = "{0}" -f $FIREWALLRULEDISPLAYNAME
            Description = "Hello there <(^.^<)." + "This rule was automatically generated by an Andrew script. " + "The purpose of this rule is to prevent outbound traffic by the steam client. " + "The purpose of this description is to generate a (hopefully) unique identifier."
            Direction = "Outbound"
            Action = "Block"
            Program = "{0}\{1}" -f $steamPath, $STEAMEXE_DISPLAYNAME
        }
        New-NetFirewallRule @params
    }
}

function Set-SWdfRule( $key, $value ) {
    Try {
        $params = @{
            DisplayName = "{0}" -f $FIREWALLRULEDISPLAYNAME
            $key = $value
        }
        Set-NetFirewallRule @params -ErrorAction Stop
    } catch [Microsoft.PowerShell.Cmdletization.Cim.CimJobException] {
        $false
    } finally {
        $Error.Clear()
    }
}

function Switch-SWdfRule {
    if (Test-SWdfRuleIsEnabled) {
        $flippedValue = $NETSECURITY_ENABLED_FALSE
    } Else {
        $flippedValue = $NETSECURITY_ENABLED_TRUE
    } # Code repeats, make a helper function
    Set-SWdfRule "Enabled" ("{0}" -f $flippedValue )
    Test-SWdfRuleIsEnabled
}

function Test-SWdfRuleIsEnabled {
    $isEnabled = Get-SWdfRule | Select-Object -ExpandProperty Enabled
    [bool]::Parse( $isEnabled )
}
